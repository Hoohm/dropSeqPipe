"""Generate pre alignement steps."""


# Configfile
configfile: 'config.yaml'

# Executables
TMPDIR = config['TMPDIR']
PICARD = config['PICARD']
DROPSEQ = config['DROPSEQ']
CORES = config['CORES']

starttrim_length = round(max((config['GLOBAL']['Cell_barcode']['end'] - config['GLOBAL']['Cell_barcode']['start'] + 1)/2,5))


rule all:
	input: expand('{sample}_tagged_unmapped.fastq.gz', sample=config['Samples'])

# rule fastq_to_sam:
	# """Create an empty bam file linking cell/UMI barcodes to reads"""
	# input:
		# r1='{sample}_R1.fastq.gz',
		# r2='{sample}_R2.fastq.gz'
	# output:
		# temp('{sample}_unaligned.bam')
	# threads: CORES
	# shell:
		# """java -Djava.io.tmpdir={TMPDIR} -Xmx8g -Xms4096m -XX:ParallelGCThreads={CORES} -jar {PICARD} FastqToSam\
		# F1={input.r1}\
		# F2={input.r2}\
		# SM=DS O={output}"""

rule stage1:
	input: '{sample}_unaligned.bam'
	output: '{sample}_tagged_unmapped.bam'
	params:
		BC_summary = 'logs/{sample}_CELL_barcode.txt',
		UMI_summary = 'logs/{sample}_UMI_barcode.txt',
		start_trim = 'logs/{sample}_start_trim.txt',
		polyA_trim = 'logs/{sample}_polyA_trim.txt',
		BC_start = config['GLOBAL']['Cell_barcode']['start'],
		BC_end = config['GLOBAL']['Cell_barcode']['end'],
		BC_min_quality = config['GLOBAL']['Cell_barcode']['min_quality'],
		BC_min_quality_num = config['GLOBAL']['Cell_barcode']['num_below_quality'],
		UMI_start = config['GLOBAL']['UMI']['start'],
		UMI_end = config['GLOBAL']['UMI']['end'],
		UMI_min_quality = config['GLOBAL']['UMI']['min_quality'],
		UMI_min_quality_num = config['GLOBAL']['Cell_barcode']['num_below_quality'],
		SmartAdapter = config['GLOBAL']['5PrimeSmartAdapter']
	threads: CORES
	shell:
		"""{DROPSEQ}/TagBamWithReadSequenceExtended\
		SUMMARY={params.BC_summary}\
		BASE_RANGE={params.BC_start}-{params.BC_end}\
		BASE_QUALITY={params.BC_min_quality}\
		BARCODED_READ=1\
		DISCARD_READ=false\
		TAG_NAME=XC\
		NUM_BASES_BELOW_QUALITY={params.BC_min_quality_num}\
		INPUT={input}\
		OUTPUT=/dev/stdout COMPRESSION_LEVEL=0 |\
		\
		{DROPSEQ}/TagBamWithReadSequenceExtended\
		SUMMARY={params.UMI_summary}\
		BASE_RANGE={params.UMI_start}-{params.UMI_end}\
		BASE_QUALITY={params.UMI_min_quality}\
		BARCODED_READ=1\
		DISCARD_READ=true\
		TAG_NAME=XM\
		NUM_BASES_BELOW_QUALITY={params.UMI_min_quality_num}\
		INPUT=/dev/stdin\
		OUTPUT=/dev/stdout COMPRESSION_LEVEL=0 |\
		\
		{DROPSEQ}/FilterBAM TAG_REJECT=XQ\
		INPUT=/dev/stdin\
		OUTPUT=/dev/stdout COMPRESSION_LEVEL=0 |\
		\
		{DROPSEQ}/TrimStartingSequence\
		OUTPUT_SUMMARY={params.start_trim}\
		SEQUENCE={params.SmartAdapter}\
		MISMATCHES=0\
		NUM_BASES={starttrim_length}\
		INPUT=/dev/stdin\
		OUTPUT=/dev/stdout COMPRESSION_LEVEL=0 |\
		\
		{DROPSEQ}/PolyATrimmer\
		OUTPUT_SUMMARY={params.polyA_trim}\
		MISMATCHES=0\
		NUM_BASES=6\
		OUTPUT={output}\
		INPUT=/dev/stdin"""

rule sam_to_fastq:
	input: '{sample}_tagged_unmapped.bam'
	output: '{sample}_tagged_unmapped.fastq.gz'
	threads: CORES
	shell:
		"""java -Xmx8g -Xms4096m -XX:ParallelGCThreads={CORES} -jar -Djava.io.tmpdir={TMPDIR}	{PICARD} SamToFastq\
		INPUT={input}\
		FASTQ=/dev/stdout COMPRESSION_LEVEL=0|\
		gzip > {output}"""